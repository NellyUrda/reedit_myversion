{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// creem slice\n// creem asyncThunk pt request la pagina \nexport const fetchTopics = createAsyncThunk('allTopics/fetchTopics', async () => {\n  // async func ce face a reguest la reedit, intoarce  promise:lista de topics\n  const baseUrl = 'https://www.reddit.com';\n  try {\n    const response = await fetch(`${baseUrl}/subreddits.json`);\n    if (response.ok) {\n      const jsonResponse = await response.json();\n      console.log(\"raspunsul:\");\n      let topics = [];\n      topics = jsonResponse.data.children.map(subreddit => subreddit.data);\n      return topics;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const allTopicsSlice = createSlice({\n  name: 'allTopics',\n  initialState: {\n    topics: [],\n    isLoading: false,\n    hasError: false\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchTopics.pending]: (state, action) => {\n      state.isLoading = true;\n      state.hasError = false;\n    },\n    [fetchTopics.fulfilled]: (state, action) => {\n      state.topics = action.payload;\n      state.isLoading = false;\n      state.hasError = false;\n    },\n    [fetchTopics.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.hasError = true;\n    }\n  }\n});\n\n// creem selectors ca apoi sa folosim state si action in componenta(AllTopics.js) \n// acolo vom folosi useSelector(), useDispatch()\n\nexport const selectAllTopics = state => state.allTopics.topics;\nexport const selectFilteredAllTopics = state => {\n  const topics = selectAllTopics(state);\n  return topics;\n};\nexport default allTopicsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchTopics","baseUrl","response","fetch","ok","jsonResponse","json","console","log","topics","data","children","map","subreddit","error","allTopicsSlice","name","initialState","isLoading","hasError","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","selectAllTopics","allTopics","selectFilteredAllTopics","reducer"],"sources":["C:/Users/urdan/reedit_myversion/src/features/allTopicsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\n\r\n// creem slice\r\n// creem asyncThunk pt request la pagina \r\nexport const fetchTopics = createAsyncThunk(\r\n    'allTopics/fetchTopics', \r\n    async () =>{\r\n        \r\n        // async func ce face a reguest la reedit, intoarce  promise:lista de topics\r\n         const baseUrl = 'https://www.reddit.com';\r\n         try{\r\n           const response = await fetch(`${baseUrl}/subreddits.json`);\r\n           if(response.ok){\r\n               const jsonResponse = await response.json();\r\n               console.log(\"raspunsul:\")\r\n               let topics = [];\r\n               topics = jsonResponse.data.children.map((subreddit) => subreddit.data);\r\n               return topics;\r\n               \r\n           }\r\n       \r\n         }catch(error){\r\n           console.log(error);\r\n         }\r\n    }\r\n       \r\n)\r\n\r\n\r\nexport const allTopicsSlice = createSlice({\r\n    name: 'allTopics',\r\n    initialState:{\r\n        topics: [],\r\n        isLoading: false,\r\n        hasError: false\r\n    },\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchTopics.pending]:(state, action) =>{\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [fetchTopics.fulfilled]:(state, action)=>{\r\n            state.topics= action.payload;\r\n            state.isLoading= false;\r\n            state.hasError = false;\r\n        },\r\n        [fetchTopics.rejected]:(state, action)=>{\r\n            state.isLoading = false;\r\n            state.hasError = true;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\n\r\n// creem selectors ca apoi sa folosim state si action in componenta(AllTopics.js) \r\n// acolo vom folosi useSelector(), useDispatch()\r\n\r\nexport const selectAllTopics =(state)=>state.allTopics.topics;\r\nexport const selectFilteredAllTopics =(state)=>{\r\n    const topics = selectAllTopics(state);\r\n    return topics;\r\n}\r\n\r\nexport default allTopicsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAKhE;AACA;AACA,OAAO,MAAMC,WAAW,GAAGD,gBAAgB,CACvC,uBAAuB,EACvB,YAAW;EAEP;EACC,MAAME,OAAO,GAAG,wBAAwB;EACxC,IAAG;IACD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEF,OAAQ,kBAAiB,CAAC;IAC1D,IAAGC,QAAQ,CAACE,EAAE,EAAC;MACX,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC1CC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACzB,IAAIC,MAAM,GAAG,EAAE;MACfA,MAAM,GAAGJ,YAAY,CAACK,IAAI,CAACC,QAAQ,CAACC,GAAG,CAAEC,SAAS,IAAKA,SAAS,CAACH,IAAI,CAAC;MACtE,OAAOD,MAAM;IAEjB;EAEF,CAAC,QAAMK,KAAK,EAAC;IACXP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;EACpB;AACL,CAEJ,CAAC;AAGD,OAAO,MAAMC,cAAc,GAAGjB,WAAW,CAAC;EACtCkB,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAC;IACTR,MAAM,EAAE,EAAE;IACVS,SAAS,EAAE,KAAK;IAChBC,QAAQ,EAAE;EACd,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAE;IACX,CAACrB,WAAW,CAACsB,OAAO,GAAE,CAACC,KAAK,EAAEC,MAAM,KAAI;MACpCD,KAAK,CAACL,SAAS,GAAG,IAAI;MACtBK,KAAK,CAACJ,QAAQ,GAAG,KAAK;IAC1B,CAAC;IACD,CAACnB,WAAW,CAACyB,SAAS,GAAE,CAACF,KAAK,EAAEC,MAAM,KAAG;MACrCD,KAAK,CAACd,MAAM,GAAEe,MAAM,CAACE,OAAO;MAC5BH,KAAK,CAACL,SAAS,GAAE,KAAK;MACtBK,KAAK,CAACJ,QAAQ,GAAG,KAAK;IAC1B,CAAC;IACD,CAACnB,WAAW,CAAC2B,QAAQ,GAAE,CAACJ,KAAK,EAAEC,MAAM,KAAG;MACpCD,KAAK,CAACL,SAAS,GAAG,KAAK;MACvBK,KAAK,CAACJ,QAAQ,GAAG,IAAI;IACzB;EAEJ;AAEJ,CAAC,CAAC;;AAGF;AACA;;AAEA,OAAO,MAAMS,eAAe,GAAGL,KAAK,IAAGA,KAAK,CAACM,SAAS,CAACpB,MAAM;AAC7D,OAAO,MAAMqB,uBAAuB,GAAGP,KAAK,IAAG;EAC3C,MAAMd,MAAM,GAAGmB,eAAe,CAACL,KAAK,CAAC;EACrC,OAAOd,MAAM;AACjB,CAAC;AAED,eAAeM,cAAc,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}