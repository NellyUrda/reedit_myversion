{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from '@reduxjs/toolkit';\n\n//asyncThunk action care ne da posts pt subredit(topic) specific\n// asyncThunk func that fetch posts by specific topic from www.\nexport const fetchPostsbyTopic = createAsyncThunk('posts/getPostsbyTopic', async topic => {\n  const baseUrl = 'https://www.reddit.com';\n  try {\n    // topic va fi ce am ales eu apasand butonul\n    // imi va lua url asociat topicului: ex home: /r/Home/\n    const response = await fetch(`${baseUrl}${topic}.json`);\n    if (response.ok) {\n      const jsonResponse = await response.json();\n      let posts = [];\n      posts = jsonResponse.data.children.map(post => post.data);\n      console.log(\"posts:\");\n      console.log(posts);\n      return posts;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState: {\n    posts: [],\n    isLoading: false,\n    hasError: false,\n    selectedTopic: '/r/Home/',\n    searchTerm: ''\n  },\n  reducers: {\n    setSelectedTopic: (state, action) => {\n      state.selectedTopic = action.payload;\n    },\n    setSearchTerm: (state, action) => {\n      state.searchTerm = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchPostsbyTopic.pending]: (state, action) => {\n      state.isLoading = true;\n      state.hasError = false;\n    },\n    [fetchPostsbyTopic.fulfilled]: (state, action) => {\n      state.posts = action.payload;\n      state.isLoading = false;\n      state.hasError = false;\n    },\n    [fetchPostsbyTopic.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.hasError = true;\n    }\n  }\n});\n\n// creem selectors ca apoi sa folosim state si action in componenta(Posts.js) \n// acolo vom folosi accesa valorile din state cu useSelector(), useDispatch()\n// .topic state selector\nexport const selectSelectedTopic = state => state.posts.selectedTopic;\nexport const selectFilteredSelectedTopic = state => {\n  const selectedTopic = selectSelectedTopic(state);\n  return selectedTopic;\n};\n// .hasError state selector\nexport const selectHasError = state => state.posts.hasError;\nexport const selectFilteredHasError = state => {\n  const hasError = selectHasError(state);\n  return hasError;\n};\n\n// .searchTerm state selector\nexport const selectSearchTerm = state => state.posts.searchTerm;\nexport const selectFilteredSearchTerm = state => {\n  const searchTerm = selectSearchTerm(state);\n  return searchTerm;\n};\n\n// daca nu am pus topic inca, nu pot cere posts ca si la celelalte, pt ca depinde de topic\n// trebuie sa folosesc createSelector care asteapta dupa alt state\n// .posts state selector\nexport const selectPosts = state => state.posts.posts;\n//export const selectFilteredPosts = createSelector([selectPosts], posts => posts);\n\nexport const selectFilteredPosts = createSelector([selectPosts, selectSearchTerm], (posts, searchTerm) => {\n  if (searchTerm !== '') {\n    return posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n  }\n  return posts;\n});\n\n// export action an reducer\nexport const {\n  setSelectedTopic,\n  setSearchTerm\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createSelector","fetchPostsbyTopic","topic","baseUrl","response","fetch","ok","jsonResponse","json","posts","data","children","map","post","console","log","error","postsSlice","name","initialState","isLoading","hasError","selectedTopic","searchTerm","reducers","setSelectedTopic","state","action","payload","setSearchTerm","extraReducers","pending","fulfilled","rejected","selectSelectedTopic","selectFilteredSelectedTopic","selectHasError","selectFilteredHasError","selectSearchTerm","selectFilteredSearchTerm","selectPosts","selectFilteredPosts","filter","title","toLowerCase","includes","actions","reducer"],"sources":["C:/Users/urdan/reedit_myversion/src/features/postsSlice.js"],"sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\n//asyncThunk action care ne da posts pt subredit(topic) specific\r\n// asyncThunk func that fetch posts by specific topic from www.\r\nexport const fetchPostsbyTopic = createAsyncThunk(\r\n  'posts/getPostsbyTopic',\r\n  async(topic) =>{\r\n    const baseUrl = 'https://www.reddit.com';\r\n\r\n    try{\r\n      // topic va fi ce am ales eu apasand butonul\r\n      // imi va lua url asociat topicului: ex home: /r/Home/\r\n      const response = await fetch(`${baseUrl}${topic}.json`);\r\n      if(response.ok){\r\n        const jsonResponse = await response.json();\r\n\r\n        let posts = [];\r\n        posts = jsonResponse.data.children.map((post)=> post.data);\r\n        console.log(\"posts:\");\r\n        console.log(posts);\r\n        return posts;\r\n      }\r\n    }catch (error){\r\n      console.log(error);\r\n    }\r\n  }\r\n)\r\n\r\n\r\nexport const postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState:{\r\n    posts: [],\r\n    isLoading: false,\r\n    hasError: false,\r\n    selectedTopic: '/r/Home/',\r\n    searchTerm: ''\r\n  },\r\n  reducers: {\r\n    setSelectedTopic: (state, action) =>{\r\n      state.selectedTopic = action.payload;\r\n    },\r\n    setSearchTerm:(state, action) =>{\r\n    state.searchTerm = action.payload;\r\n    }\r\n  },\r\n  extraReducers:{\r\n    [fetchPostsbyTopic.pending]:(state, action)=>{\r\n      state.isLoading = true;\r\n      state.hasError = false;\r\n    },\r\n    [fetchPostsbyTopic.fulfilled]:(state, action)=>{\r\n      state.posts = action.payload;\r\n      state.isLoading = false;\r\n      state.hasError = false;\r\n    },\r\n    [fetchPostsbyTopic.rejected]:(state, action)=>{\r\n      state.isLoading = false;\r\n      state.hasError = true;\r\n    }\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\n// creem selectors ca apoi sa folosim state si action in componenta(Posts.js) \r\n// acolo vom folosi accesa valorile din state cu useSelector(), useDispatch()\r\n// .topic state selector\r\nexport const selectSelectedTopic =(state)=>state.posts.selectedTopic;\r\nexport const selectFilteredSelectedTopic= (state) =>{\r\n  const selectedTopic = selectSelectedTopic(state);\r\n  return selectedTopic; \r\n}\r\n// .hasError state selector\r\nexport const selectHasError =(state)=>state.posts.hasError;\r\nexport const selectFilteredHasError =(state)=>{\r\n  const hasError = selectHasError(state);\r\n  return hasError;\r\n}\r\n\r\n// .searchTerm state selector\r\nexport const selectSearchTerm = (state) => state.posts.searchTerm;\r\nexport const selectFilteredSearchTerm= (state) =>{\r\n  const searchTerm = selectSearchTerm(state);\r\n  return searchTerm;\r\n}\r\n\r\n// daca nu am pus topic inca, nu pot cere posts ca si la celelalte, pt ca depinde de topic\r\n// trebuie sa folosesc createSelector care asteapta dupa alt state\r\n// .posts state selector\r\nexport const selectPosts = (state)=>state.posts.posts;\r\n//export const selectFilteredPosts = createSelector([selectPosts], posts => posts);\r\n\r\nexport const selectFilteredPosts = createSelector(\r\n  [selectPosts, selectSearchTerm],\r\n  (posts, searchTerm) => {\r\n    if (searchTerm !== '') {\r\n      return posts.filter((post) =>\r\n        post.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    return posts;\r\n  }\r\n);\r\n\r\n\r\n// export action an reducer\r\nexport const {setSelectedTopic, setSearchTerm} = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}